# build
name: build
on:
  push:
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/build.yml"
      - "!*.md"
      - "!.gitignore"
      - "!.gitmodules"
jobs:
  build-wheel-win:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          - os: windows-2022
            cuda: "11.8.0"
            visual_studio: "Visual Studio 17 2022"
          - os: windows-2022
            cuda: "11.7.0"
            visual_studio: "Visual Studio 17 2022"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
          visual_studio: ${{ matrix.visual_studio }}
        shell: powershell
        run: .\scripts\install_cuda_windows.ps1
      - name: nvcc check
        shell: powershell
        run: |
          nvcc -V
          ls $env:CUDA_PATH
          ls $env:CUDA_PATH\bin
          ls $env:CUDA_PATH\include
      - uses: actions/setup-python@v4
      - name: Install cibuildwheel
        shell: powershell
        run: python -m pip install cibuildwheel==2.16.2
      - name: Write version to file
        shell: powershell
        env:
          CUDA_VERSION: ${{ matrix.cuda }}
        run: python ./scripts/make_version.py
      - name: Build wheels
        shell: bash
        run: |
          rm -rf ./wheelhouse
          python -m cibuildwheel --output-dir wheelhouse
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
      - name: Publish wheels to PyPI Unix
        continue-on-error: true
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install build twine flake8 setuptools wheel
          twine upload wheelhouse/*.whl

  build-wheel-linux:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-22.04
            cuda: "11.8"
          - os: ubuntu-22.04
            cuda: "11.7"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - uses: actions/setup-python@v4
      - name: Install cibuildwheel
        shell: bash
        run: |
          rm -rf ./wheelhouse
          python -m pip install cibuildwheel==2.16.2
      - name: Write version to file
        shell: bash
        env:
          CUDA_VERSION: ${{ matrix.cuda }}
        run: python ./scripts/make_version.py
      - name: Build wheels
        shell: bash
        env:
          CUDA_VERSION: ${{ matrix.cuda }}
          CIBW_ENVIRONMENT: "CUDA_VERSION=${{matrix.cuda}}"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        run: |
          python -m cibuildwheel --output-dir wheelhouse
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
      - name: Publish wheels to PyPI Unix
        continue-on-error: true
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install twine
          twine upload wheelhouse/*.whl

  deploy-tar:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-22.04
            cuda: "11.8"
          - os: ubuntu-22.04
            cuda: "11.7"
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine flake8 setuptools wheel
      - name: Install CUDA
        env:
          CUDA_VERSION: ${{ matrix.cuda }}
        run: |
          python3.12 ./scripts/install_cuda_ubuntu.py
        shell: bash
      - name: Install gcc and g++
        run: sudo apt-get install gcc-11 g++-11
      - name: Write version to file
        shell: bash
        env:
          CUDA_VERSION: ${{ matrix.cuda }}
        run: python3.12 ./scripts/make_version.py
      - name: Build source tar
        env: 
          PATH: '$PATH:/usr/local/cuda-${{matrix.cuda}}/bin'
          LD_LIBRARY_PATH: '$LD_LIBRARY_PATH:/usr/local/cuda-${{matrix.cuda}}/lib64'
        run: |
          python -m build
      - name: Publish wheels to PyPI
        continue-on-error: true
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*tar*
